
import java.util.*;
import java.io.*;






class InputReader{
    public BufferedReader reader;
    public StringTokenizer tokenizer;
    public InputReader(InputStream stream){
        reader = new BufferedReader(new InputStreamReader(stream));
        tokenizer = null;
    }
    
    public String next(){
        while(tokenizer == null || !tokenizer.hasMoreTokens()){
            try{
                tokenizer = new StringTokenizer(reader.readLine());
            } catch(IOException e){
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }
    public int nextInt(){
        return Integer.parseInt(next());
    }
}

public class Eapcpm {

    public static int row;
    public static int column;
    public static int[][][] Tabuleiro;
    public static int[][] PieceArray;
    public static HashMap<int[],ArrayList<Integer>> compatibleKeys;
    
    static PrintWriter out = new PrintWriter(System.out);
        
    static void printPieces(){
        
        for(int i = 0; i<Tabuleiro.length; i++){
            for(int j = 0; j<Tabuleiro[0].length; j++){
                
                out.print( Tabuleiro[i][j][0] + " " + Tabuleiro[i][j][1]);
                
                if(j < Tabuleiro[0].length-1){
                    out.print("  ");
                }
   
            }
            out.println();
            for(int j = 0; j<Tabuleiro[0].length; j++){

                out.print( Tabuleiro[i][j][3] + " " + Tabuleiro[i][j][2]);
                if(j < Tabuleiro[0].length-1){
                   out.print("  ");
                } 
            }
            out.println();

            if(i < Tabuleiro.length-1){
                out.print("\n");
            }
        }
        
    }
    //one = baixo, two = meio, three = direita
    static ArrayList<Integer> findCornersComp(int one, int two, int three){
        int[] key = new int [3];
        key[0] = one; //compare with 3
        key[1] = two; //compare with 0
        key[2] = three; //compare with 1
        for (int[] compatibleKey : compatibleKeys.keySet()) {
            if(Arrays.equals(key, compatibleKey)){
                //out.println("entrei");
                return compatibleKeys.get(compatibleKey);
            }
        }
        
        ArrayList<Integer> arrayFinal = new ArrayList<>();
        int zeroInd = 1;
        int oneInd = 0;
        int twoInd = 3;
        for(int i = 0; i < PieceArray.length;i++){
            for(int j = 0; j<4; j++){
                zeroInd = (zeroInd+1)%4;
                oneInd = (oneInd+1)%4;
                twoInd = (twoInd+1)%4;
                if((key[0] == PieceArray[i][twoInd]) && (key[1] == PieceArray[i][oneInd]) && (key[2] == PieceArray[i][zeroInd])){
                    //out.println("entrei aqui");
                    
                    arrayFinal.add(i);
                    break;
                }
                
                
            }
        }
        
         compatibleKeys.put(key, arrayFinal);
        return compatibleKeys.get(key);
    }
    
    static ArrayList<Integer> findCompatibles(int one, int two){
        int[] key = new int[2];
        key[0] = one;
        key[1] = two;
        for (int[] compatibleKey : compatibleKeys.keySet()) {
            if(Arrays.equals(key, compatibleKey)){

                return compatibleKeys.get(compatibleKey);
            }
        }
        
        ArrayList<Integer> arrayFinal = new ArrayList<>();
        for(int i = 1; i<PieceArray.length; i++){
            int[] temp = PieceArray[i];
            for(int j = 0; j < 4; j++){


                int zeroInd = j+1;
                int oneInd = j;
                if(zeroInd > 3){
                    zeroInd = 0;
                }
                if((key[0] == temp[zeroInd]) && (key[1] == temp[oneInd])){


                    arrayFinal.add(i);
                    break;
                }

            }


        }
        
        compatibleKeys.put(key, arrayFinal);
        return compatibleKeys.get(key);

    }
    
    static void rotatePiece(int[] piece){
        int temp;
        temp = piece[0];
        piece[0] = piece[3];
        piece[3] = piece[2];
        piece[2] = piece[1];
        piece[1] = temp;
        
        
    }
    static int ComparePieces(int LastR, int LastC) {
        if((LastR == row-1) && (LastC == column-1)){
            return 1;
        }
        else if(LastC == column-1){
            LastC = 0;
            LastR+=1;
        }
        else{
            LastC++;
        }
        if (LastR == 0) {
            ArrayList<Integer> tempCompatible = findCompatibles(Tabuleiro[LastR][LastC-1][1],Tabuleiro[LastR][LastC-1][2]);
            for (int i = 0; i<tempCompatible.size();i++) {
                
                int[] AllPiece = PieceArray[tempCompatible.get(i)];
                
                
                if(AllPiece[4] == 0){
                    for(int j = 0; j<4;j++){
                        rotatePiece(AllPiece);
                        if((Tabuleiro[LastR][LastC-1][1] == AllPiece[0]) && (Tabuleiro[LastR][LastC-1][2] == AllPiece[3])){
                            Tabuleiro[LastR][LastC] = AllPiece;


                            AllPiece[4] = 1;
                            int resultado = ComparePieces(LastR, LastC);

                            if(resultado == 1){
                                return 1;
                            }
                            else{
                                Tabuleiro[LastR][LastC] = null;
                                AllPiece[4] = 0;

                            }
                        }
                    }
                }
            }
        }
        else{
            ArrayList<Integer> tempCompatible;
            if(LastC == 0){
                tempCompatible = findCompatibles(Tabuleiro[LastR-1][0][2],Tabuleiro[LastR-1][0][3]);
                for(int i = 0; i<tempCompatible.size();i++){
                int[] AllPiece = PieceArray[tempCompatible.get(i)];
                
                if(AllPiece[4] == 0){
                    for(int j = 0; j<4;j++){
                        rotatePiece(AllPiece);
                        if((Tabuleiro[LastR-1][LastC][2] == AllPiece[1]) && (Tabuleiro[LastR-1][LastC][3] == AllPiece[0])){
                            //out.println("tou ca dentro");
                                Tabuleiro[LastR][LastC] = AllPiece;

                                AllPiece[4] = 1;

                                
                                int resultado = ComparePieces( LastR, LastC);

                                if(resultado == 1){
                                    return 1;
                                }
                                else{
                                    Tabuleiro[LastR][LastC] = null;
                                    AllPiece[4] = 0;

                                }
                        }
                    }  
                }
            }
            }
            else{
                tempCompatible = findCornersComp(Tabuleiro[LastR][LastC-1][2],Tabuleiro[LastR][LastC-1][1],Tabuleiro[LastR-1][LastC][2]);
               
                
              
            
            
                for(int i = 0; i<tempCompatible.size();i++){



                    int[] AllPiece = PieceArray[tempCompatible.get(i)];

                    if(AllPiece[4] == 0){
                        for(int j = 0; j<4;j++){
                            rotatePiece(AllPiece);
                            if((Tabuleiro[LastR-1][LastC][2] == AllPiece[1]) && (Tabuleiro[LastR][LastC-1][1] == AllPiece[0]) && (Tabuleiro[LastR][LastC-1][2] == AllPiece[3])){
                                    
                                    Tabuleiro[LastR][LastC] = AllPiece;

                                    AllPiece[4] = 1;

                                    int resultado = ComparePieces(LastR, LastC);

                                    if(resultado == 1){
                                        return 1;
                                    }
                                    else{
                                        Tabuleiro[LastR][LastC] = null;
                                        AllPiece[4] = 0;

                                    }
                                
                            }
                        }  
                    }
                }
            }
            
        }   
        return 0;
    }
    
    public static void main(String[] args) {
        
        InputReader in = new InputReader(System.in);
        
        
        
        
        int tries = in.nextInt();
        

        for (int i = 0; i < tries; i++) {

            compatibleKeys = new HashMap<>();
            int N = 0,R = 0,C = 0;
        
            
        
            int[] numeros = new int[999];
            
            
            try {

                N = in.nextInt();
                

                R = in.nextInt();
                C = in.nextInt();
                if(N == (R*C)){
                }else{
                    out.println("impossible puzzle!");
                    break;
                }
                PieceArray = new int[N][5];
            } catch (NumberFormatException ex) {
            }

            for (int j = 0; j < N; j++) {
                
                
                try {
                    for(int num = 0; num<4; num++){
                        PieceArray[j][num] = in.nextInt();
                        numeros[PieceArray[j][num]]+=1;
                    }
                    PieceArray[j][4] = 0;

                    
                } catch (NumberFormatException ex) {
                }
            }
            int contaImpares = 0;
            for(int c = 0; c<numeros.length; c++){
                if ( (numeros[c]%2) == 0 ) { 
                } else { 
                    
                    contaImpares++;                     
                }  
            }
            if (contaImpares>4) { 
                        out.println("impossible puzzle!");
                }
            else{

                int[] FirstPiece = PieceArray[0];
          
                Tabuleiro = new int[R][C][5];
                
                Tabuleiro[0][0] = FirstPiece;
                row = Tabuleiro.length;
                column = Tabuleiro[0].length;
                FirstPiece[4] = 1;
                int LastPieceR = 0; 
                int LastPieceC = 0;


                if(ComparePieces(LastPieceR,LastPieceC) == 1){
                    printPieces();
                }
                else{
                    out.println("impossible puzzle!");
                }

                Tabuleiro = null;
                compatibleKeys.clear();
                PieceArray = null;


            }
        }
        out.close();
    }
    
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              